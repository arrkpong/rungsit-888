#คำสั่งนี้จะแสดงรายการของโมดูลที่ติดตั้งและเวอร์ชันที่ใช้อยู่ในโปรเจกต์
pip freeze

#คำสั่งนี้จะสร้างไฟล์ requirements.txt ในไดเรกทอรีปัจจุบันของโปรเจกต์ Django ของคุณ โดยมีรายการของโมดูลทั้งหมดและเวอร์ชันที่ถูกติดตั้งอยู่ภายในไฟล์นี้
pip freeze > requirements.txt

#คำสั่ง pip เพื่ออัปเดต libraries ทั้งหมดที่ระบุในไฟล์ requirements.txt ใหม่:
pip install --upgrade -r requirements.txt

#คำสั่งนี้สามารถใช้ไฟล์ requirements.txt นี้ในการติดตั้งโมดูลทั้งหมดที่จำเป็นในโปรเจกต์ Django
pip install -r requirements.txt

-----------------------------------------------------------------------------------------------------------------------------
#คำสั่งนี้จะรวบรวมไฟล์ static ใช้ในระดับ production
python manage.py collectstatic
#คำสั่งที่ใช้ใน Django ซึ่งเป็นเว็บเฟรมเวิร์กที่พัฒนาโดยใช้ภาษา Python คำสั่งนี้มีหน้าที่รันเซิร์ฟเวอร์ทดสอบ (development server)
python manage.py runserver

-----------------------------------------------------------------------------------------------------------------------------
------------------------------------------Important for checking payment status----------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
#ตั้ง path stripe-cli stripe.exe โดยเข้าไปที่ edite the system environment variable 
#คำสั่งนี้ใช้ในการเข้าสู่ระบบบัญชี Stripe ของคุณ โดยทำให้คุณสามารถเข้าถึงบัญชีและทำการตั้งค่าต่างๆ ได้อย่างสะดวก
stripe login

#คำสั่งนี้ใช้ในการสร้าง Webhook ซึ่งเป็นการตั้งค่าให้ Stripe ส่งข้อมูลเหตุการณ์ (เช่น การชำระเงินสำเร็จ) ไปยัง URL ที่ระบุ (ในที่นี้คือ localhost:8000/webhook/) 
#ทำให้เว็บแอปพลิเคชันของคุณสามารถตรวจจับและประมวลผลเหตุการณ์นั้นได้
stripe listen --forward-to localhost:8000/webhook/

#คำสั่งนี้ใช้ในการเรียกใช้เหตุการณ์ที่เกิดขึ้นในระบบของ Stripe โดยการสร้างเหตุการณ์ "payment_intent.succeeded" ซึ่งจำลองเหตุการณ์การชำระเงินที่สำเร็จ 
#ทำให้คุณสามารถทดสอบการประมวลผลเหตุการณ์นี้ในระบบของคุณได้โดยไม่จำเป็นต้องทำการชำระเงินจริงๆ ใน Stripe จริง ๆ อย่างชัดเจนและปลอดภัย
stripe trigger payment_intent.succeeded

----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------Setup Virtual Environment----------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
#สร้าง environment
python -m venv env
#error ข้อจำกัดด้านความปลอดภัยที่ป้องกันสคริปต์ PowerShell ไม่สามารถทำงานได้ในระบบ เป็นเพราะนโยบายการดำเนินการของ PowerShell ถูกตั้งไว้อย่างจำกัด
Activate.ps1 cannot be loaded 
because running scripts is disabled on this system. For more information, see 
about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:1
+ env\Scripts\activate
+ ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : SecurityError: (:) [], PSSecurityException
    + FullyQualifiedErrorId : UnauthorizedAccess
    
#วิธีแก้
Set-ExecutionPolicy Bypass -Scope Process
ยืนยันการเปลี่ยนแปลงโดยพิมพ์ Y และกด Enter
#วิธีเปิด environment
.\env\Scripts\Activate
#วิธีปิด environment
deactivate

----------------------------------------------------------------------------------------------------------------------------
---------------------------------------------Upload to GitHub---------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
#การอัพโหลดโปรเจ็คไปที่ GitHub สามารถทำได้โดยใช้คำสั่ง git ต่อไปนี้:
1. ตั้งค่า Git และสร้าง Repository บน GitHub
-สร้างบัญชีผู้ใช้บน GitHub ถ้ายังไม่มีบัญชี
-สร้าง Repository ใหม่บน GitHub
2. เตรียมโปรเจ็คบนเครื่องของคุณ
-เปิด Terminal หรือ Command Prompt
-ไปที่ไดเร็กทอรีของโปรเจ็คที่ต้องการอัพโหลด

#ตั้งค่า Git (ครั้งแรกเท่านั้น)
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"


#เริ่มต้น Repository บนเครื่อง
git init

#เพิ่มไฟล์ทั้งหมดในโปรเจ็คไปยัง staging area
git add .

#ทำการ commit ไฟล์ที่เพิ่มเข้าไป
#ตัวอย่าง
git commit -m "Initial commit"
git commit -m "Fixed issues and updated files"

#ตั้งค่า remote URL สำหรับ Repository ที่สร้างบน GitHub
git remote add origin https://github.com/username/repository.git

#ส่งโปรเจ็คไปยัง GitHub
git push origin main

----------------------------------------------------------------------------------------------------------------------------
---------------------------------------------Pull changes from GitHub--------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

ในการดึงการเปลี่ยนแปลงจาก GitHub มาที่เครื่องของคุณ สามารถทำตามขั้นตอนต่อไปนี้ได้:

ตรวจสอบว่าอยู่ในไดเร็กทอรีโปรเจกต์:
เปิด terminal หรือ command prompt และไปที่ไดเร็กทอรีของโปรเจกต์ที่คุณต้องการดึงการเปลี่ยนแปลง:
cd path/to/your/project

ดึงการเปลี่ยนแปลงจาก remote repository:
ใช้คำสั่ง git pull เพื่อดึงการเปลี่ยนแปลงจาก remote repository มาที่เครื่องของคุณ:
git pull origin main

คำสั่งนี้จะทำการดึงการเปลี่ยนแปลงจาก branch main ของ remote repository ที่ชื่อ origin มาที่ branch main ของ local repository ของคุณ

ตัวอย่างเพิ่มเติมของการใช้คำสั่ง git
ดึงการเปลี่ยนแปลงจาก branch อื่น:
ถ้าคุณต้องการดึงการเปลี่ยนแปลงจาก branch อื่น เช่น development:
git pull origin development

ดึงการเปลี่ยนแปลงจาก remote repository อื่น:
ถ้าคุณมี remote repository ชื่ออื่น เช่น upstream:
git pull upstream main

ตรวจสอบ remote repository:
ถ้าคุณต้องการตรวจสอบ remote repository ที่ตั้งค่าไว้ในโปรเจกต์:
git remote -v

----------------------------------------------------------------------------------------------------------------------------
---------------------------------------------Create a user with status is_staff---------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
ใน Django, การสร้างผู้ใช้ที่มีสถานะเป็น staff สามารถทำได้โดยการตั้งค่าสถานะ is_staff ของผู้ใช้นั้นให้เป็น True โดยคุณสามารถสร้างผู้ใช้ staff 
ผ่านทาง Django admin interface หรือโดยการใช้โค้ด Python ดังนี้:

วิธีที่ 1: ผ่านทาง Django admin interface
เข้าสู่ Django admin interface ด้วยบัญชี superuser ของคุณ
ไปที่ส่วน Users (ผู้ใช้)
คลิกที่ "Add user" (เพิ่มผู้ใช้) หรือเลือกผู้ใช้ที่มีอยู่แล้วที่คุณต้องการเปลี่ยนสถานะ
กรอกข้อมูลที่จำเป็นหรือแก้ไขข้อมูลที่ต้องการ
ในส่วนของ Permissions (สิทธิ์การเข้าถึง), ให้เลือก checkbox ที่เขียนว่า "Staff status" (สถานะ staff)
บันทึกการเปลี่ยนแปลง

วิธีที่ 2: ใช้ Python Shell หรือโค้ด Python
คุณสามารถใช้ Python shell หรือเขียนสคริปต์ Python เพื่อสร้างผู้ใช้ที่มีสถานะเป็น staff ได้ดังนี้:

ใช้ Python Shell
เปิด terminal แล้วรันคำสั่ง:
python manage.py shell

รันโค้ดต่อไปนี้ใน Python shell:

from django.contrib.auth.models import User

# สร้างผู้ใช้ใหม่
user = User.objects.create_user(username='staffuser', password='password123')

# ตั้งค่าสถานะเป็น staff
user.is_staff = True
user.save()

----------------------------------------------------------------------------------------------------------------------------